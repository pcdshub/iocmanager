initIOC
	-- The new startup script to be run from /etc/init.d.  This loads drivers,
	   starts caRepeater, and runs procmgrd instances for fee, las, and the
	   local hutch (if different).
startAll, startAll.py
	-- "startAll hutch hostname" starts all of the IOCs for the given hutch
	   on the given hostname.
applyConfig, applyConfig.py
	-- "applyConfig hutch" reads the configuration file for the hutch and
	   kills, starts, or restarts processes, as needed.
getDirectory, getDirectory.py
	-- "getDirectory id hutch" will retrieve the 'dir' field from the hutch's
	    configuration file for a particular IOC.
host.exceptions
	-- In general, hostname ioc-XXX-* is assumed to be hutch 'xxx', except "xrt"
	   is "fee".  For hosts that do not follow this, add an entry to this file
	   of the form "hostname hutch".
startProc
	-- "startProc id port hutch" will make an entry into the STATUS directory
	   and run the currently configured program.
utils.py
	-- General python utilities.
CONFIG
	-- The configuration directory.  Each hutch has a config file here, similar
	   to the procmgr config file.  The 'dir' field is what should be run there.
	   It is assumed to be relative to EPICS_SITE_TOP, and the particular iocBoot
	   directory is appended to the end.  If there is a cmd, it will be run,
	   otherwise startProc will be invoked.  (The 'u' flag in the 'flags' field
	   is supported, as in procmgr to append "-u id" to the command.)
STATUS
	-- The status directory.  Each hutch has a directory here, with each IOC
	   having a separate file.  The file has the id as a name, and contains
	   space-separated PID, hostname, control port, and dir.  This is the last
	   incarnation of this IOC that was started, but it might not be currently
	   running!
TESTIOC
	-- Fake IOC directories for testing.  Simple scripts that just announce who
	   they are.
IocManager, IocManager.py
	-- A simple GUI for configuration file management.
ioc.ui, ioc_ui.py
	-- The IocManager layout.
COMPILE
	-- Compilation instructions for the IocManager layout.
ioc_impl.py
	-- The IocManager main window.
MyModel.py
	-- The IocManager data model.
options.py
	-- Command line option parser.
README
	-- This file.
